# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'json'

# Cargar la configuración desde un archivo JSON
config_file = File.join(File.dirname(__FILE__), "config.json")
if File.exist?(config_file)
  json_config = JSON.parse(File.read(config_file))
else
  raise "Archivo de configuración no encontrado: #{config_file}"
end

Vagrant.configure("2") do |config|
  # Configurar el box base desde el JSON
  config.vm.box = json_config["box"] || "ubuntu/focal64"
  
  # Configurar carpetas compartidas desde el JSON
  if json_config["shared_folders"]
    json_config["shared_folders"].each do |folder|
      config.vm.synced_folder folder["host_path"], folder["guest_path"], type: folder["type"]
    end
  end
  
  # Configurar cada nodo definido en el JSON
  json_config["nodes"].each do |node_conf|
    config.vm.define node_conf["name"] do |node|
      # Configuración básica del nodo
      node.vm.hostname = node_conf["hostname"]
      
      # Configuración de red simplificada
      node.vm.network "private_network", ip: node_conf["ip"]
      
      # Configuración del proveedor VirtualBox
      node.vm.provider "virtualbox" do |vb|
        vb.name = node_conf["name"]
        vb.memory = node_conf["memory"]
        vb.cpus = node_conf["cpus"]
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      end
      
      # Crear archivo de variables de entorno para el nodo si existen
      if node_conf["env_vars"] && !node_conf["env_vars"].empty?
        env_file_content = ""
        node_conf["env_vars"].each do |key, value|
          env_file_content += "export #{key}=\"#{value}\"\n"
        end
        
        # Escribir el archivo de entorno en el directorio actual
        env_file_path = "#{node_conf["name"]}_env.sh"
        File.write(env_file_path, env_file_content)
        
        # Copiar el archivo de entorno a la máquina virtual
        node.vm.provision "file", source: env_file_path, destination: "/tmp/#{node_conf["name"]}_env.sh"
        
        # Mover el archivo al directorio compartido y configurarlo
        node.vm.provision "shell", inline: <<-SHELL
          mv /tmp/#{node_conf["name"]}_env.sh /vagrant/#{node_conf["name"]}_env.sh
          chmod +x /vagrant/#{node_conf["name"]}_env.sh
        SHELL
      end
      
      # Procesar scripts (compatible con array y string individual)
      scripts = []
      if node_conf["scripts"]
        # Si "scripts" es un array, usarlo
        if node_conf["scripts"].is_a?(Array)
          scripts = node_conf["scripts"]
        # Si es un string, convertirlo a array para compatibilidad
        elsif node_conf["scripts"].is_a?(String)
          scripts = [node_conf["scripts"]]
        end
      elsif node_conf["script"]
        # Compatibilidad con configuración anterior
        scripts = [node_conf["script"]]
      end
      
      # Copiar y ejecutar cada script en orden
      scripts.each_with_index do |script_path, index|
        # Copiar el script a la máquina virtual
        node.vm.provision "file", source: script_path, destination: "/tmp/script_#{index}_#{File.basename(script_path)}"
        
        # Ejecutar el script
        node.vm.provision "shell", inline: <<-SHELL
          # Mover el script al directorio de trabajo y dar permisos de ejecución
          cp /tmp/script_#{index}_#{File.basename(script_path)} /tmp/provision_script_#{index}.sh
          chmod +x /tmp/provision_script_#{index}.sh
          
          # Cargar variables de entorno si existen
          if [ -f "/vagrant/#{node_conf["name"]}_env.sh" ]; then
            source /vagrant/#{node_conf["name"]}_env.sh
          fi
          
          echo "Ejecutando script #{index + 1}/#{scripts.length}: #{File.basename(script_path)}"
          
          # Ejecutar el script de aprovisionamiento desde /tmp donde tiene permisos
          /tmp/provision_script_#{index}.sh
        SHELL
      end
    end
  end
end